apiVersion: batch/v1
kind: Job
metadata:
  namespace: argocd
  generateName: mtr-pull-secret-sync-
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  ttlSecondsAfterFinished: 100
  template:
    spec:
      serviceAccountName: mtr-secret-sync
      containers:
        - name: mtr-sync-ns-sync
          image: mtr.external.otc.telekomcloud.com/couch/docker:alpine-k8s-1.11.10
          command:
            - "/bin/bash"
          args:
            - "-c"
            - "/apps/script/mtr-pull-secret-sync.sh"
          volumeMounts:
            - name: mtr-pull-secret-sync
              mountPath: /apps/script
            - name: mtr-pull-secret-def
              mountPath: /apps/yaml
      imagePullSecrets:
        - name: mtr-pull-secret-couch
      volumes:
        - name: mtr-pull-secret-sync
          configMap:
            name: mtr-pull-secret-sync
            defaultMode: 0744
        - name: mtr-pull-secret-def
          secret:
            secretName: mtr-pull-secret-couch
            defaultMode: 0744
      restartPolicy: Never
  backoffLimit: 2
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mtr-secret-sync
  namespace: argocd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mtr-secret-sync
rules:
  - apiGroups: [""]
    resources:
      - namespaces
      - secrets
    verbs:
      - get
      - list
      - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mtr-secret-sync-cluster
subjects:
  - kind: ServiceAccount
    name: mtr-secret-sync
    namespace: argocd
    apiGroup: ""
roleRef:
  kind: ClusterRole
  name: mtr-secret-sync
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mtr-pull-secret-sync
  namespace: argocd
data:
  mtr-pull-secret-sync.sh: |
    #!/bin/bash
    mtr-pull-secret_sync () {
        cluster_ns=$(kubectl get ns | awk '{if (NR!=1){print $1}}')
        excluded_ns="default kube-system kube-public kube-node-lease"
        filtered_ns=$(echo ${cluster_ns[@]} ${excluded_ns[@]} | tr ' ' '\n' | sort | uniq -u)
        secret="mtr-pull-secret-couch"
        ns_no_secret=()
        echo "The following namespaces will be scanned for $secret: ${filtered_ns[@]}"
        echo
        for i in $filtered_ns
        do
          secret_name=$(kubectl get secrets -n $i | awk '{if (NR!=1){print $1}}')
          if [[ "${secret_name[@]}" =~ "$secret" ]]; then
            echo "$i namespace contain $secret"
          else
            echo "$i namespace does not contain $secret"
            ns_no_secret=( "${ns_no_secret[@]}" "$i" )
            kubectl create secret generic mtr-pull-secret-couch --from-file=.dockerconfigjson=/app/yaml/.dockerconfigjson --type=kubernetes.io/dockerconfigjson -n $i
            if [[ $? -ne 0 ]]; then
                echo "Update failed. Check logs"
                exit 1
            else
                echo "Namespace $i updated with $secret"
            fi
          fi
        done
        echo
        if [[ -z "$ns_no_secret" ]]; then
            echo "All namespaces scanned contain $secret"
        else
            echo "Namespaces without mtr-pull-secret are ${ns_no_secret[@]} and were updated with it"
        fi
    }
    mtr-pull-secret_sync
    sleep 1m

---
kind: Namespace
apiVersion: v1
metadata:
  name: no-mtr-secret
  labels:
    name: test