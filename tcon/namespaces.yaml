apiVersion: v1
kind: Namespace
metadata:
  name: namespace1
---
apiVersion: v1
kind: Namespace
metadata:
  name: namespace2
---
apiVersion: v1
kind: Namespace
metadata:
  name: namespace3
---
apiVersion: v1
kind: Namespace
metadata:
  name: namespace4

---
apiVersion: batch/v1
kind: Job
metadata:
  namespace: argocd
  generateName: mtr-pull-secret-sync-
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  ttlSecondsAfterFinished: 100
  template:
    spec:
      serviceAccountName: mtr-secret-sync
      containers:
        - name: hook-test-script
          image: mtr.external.otc.telekomcloud.com/abamboi/alpine:k8s_1.14.6
          command:
            - "/bin/bash"
          args:
            - "-c"
            - "/apps/script/mtr-pull-secret-sync.sh"
          volumeMounts:
            - name: mtr-pull-secret-sync
              mountPath: /apps/script
            - name: mtr-pull-secret-def
              mountPath: /apps/yaml
      imagePullSecrets:
        - name: mtr-pull-secret
      volumes:
        - name: mtr-pull-secret-sync
          configMap:
            name: mtr-pull-secret-sync
            defaultMode: 0744
        - name: mtr-pull-secret-def
          secret:
            secretName: mtr-pull-secret-def
            defaultMode: 0744
      restartPolicy: Never
  backoffLimit: 2
---
apiVersion: v1
kind: Secret
metadata:
  name: mtr-pull-secret
  namespace: argocd
data:
  .dockerconfigjson: ewogICJhdXRocyI6IHsKICAgICJtdHIuZXh0ZXJuYWwub3RjLnRlbGVrb21jbG91ZC5jb20iOiB7CiAgICAgICJhdXRoIjogIllXSmhiV0p2YVN0aVlXMWlhWGc2VjFWQ1JWZExRa1E0T1U1RE9FWlpVMDVHTjFwS05FTkxSVWRUTlUwME5USk9TRU5hVFZaYVRVZFRWVTFJUzFOT01WWXdXVXN3VDBORk5sRktWVWcwUXc9PSIsCiAgICAgICJlbWFpbCI6ICIiCiAgICB9CiAgfQp9
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mtr-secret-sync
  namespace: argocd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: create-secrets-for-ns
rules:
  - apiGroups: [""]
    resources:
      - namespaces
      - secrets
    verbs:
      - get
      - list
      - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: create-secret-for-ns
subjects:
  - kind: ServiceAccount
    name: mtr-secret-sync
roleRef:
  kind: Role
  name: create-secrets-for-ns
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mtr-secret-sync
rules:
  - apiGroups: [""]
    resources:
      - namespaces
      - secrets
    verbs:
      - get
      - list
      - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mtr-secret-sync-cluster
subjects:
  - kind: ServiceAccount
    name: mtr-secret-sync
    namespace: argocd
    apiGroup: ""
roleRef:
  kind: ClusterRole
  name: mtr-secret-sync
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mtr-pull-secret-sync
  namespace: argocd
data:
  mtr-pull-secret-sync.sh: |
    #!/bin/bash
    mtr-pull-secret_sync () {
        cluster_ns=$(kubectl get ns | awk '{if (NR!=1){print $1}}')
        excluded_ns="default kube-system kube-public kube-node-lease"
        filtered_ns=$(echo ${cluster_ns[@]} ${excluded_ns[@]} | tr ' ' '\n' | sort | uniq -u)
        secret="mtr-pull-secret"
        ns_no_secret=()
        echo "The following namespaces will be scanned for mtr-pull-secret: ${filtered_ns[@]}"
        echo
        for i in $filtered_ns
        do
          secret_name=$(kubectl get secrets -n $i | awk '{if (NR!=1){print $1}}')
          if [[ "${secret_name[@]}" =~ "$secret" ]]; then
            echo "$i namespace contain mtr-pull-secret"
          else
            echo "$i namespace does not contain mtr-pull-secret"
            ns_no_secret=( "${ns_no_secret[@]}" "$i" )
            kubectl apply -f /apps/yaml/mtr-secret.yaml -n $i
            if [[ $? -ne 0 ]]; then
                echo "Update failed. Check logs"
                exit 1
            else
                echo "Namespace $i updated with $secret"
            fi
          fi
        done
        echo
        if [[ -z "$ns_no_secret" ]]; then
            echo "All namespaces scanned contain mtr-pull-secret"
        else
            echo "Namespaces without mtr-pull-secret are ${ns_no_secret[@]} and were updated with it"
        fi
    }
    mtr-pull-secret_sync
    sleep 1m
---

apiVersion: v1
data:
  mtr-secret.yaml: YXBpVmVyc2lvbjogdjEKa2luZDogU2VjcmV0Cm1ldGFkYXRhOgogIG5hbWU6IG10ci1wdWxsLXNlY3JldApkYXRhOgogIC5kb2NrZXJjb25maWdqc29uOiBld29nSUNKaGRYUm9jeUk2SUhzS0lDQWdJQ0p0ZEhJdVpYaDBaWEp1WVd3dWIzUmpMblJsYkdWcmIyMWpiRzkxWkM1amIyMGlPaUI3Q2lBZ0lDQWdJQ0poZFhSb0lqb2dJbGxYU21oaVYwcDJZVk4wYVZsWE1XbGhXR2MyVmpGV1ExSldaRXhSYTFFMFQxVTFSRTlGV2xwVk1EVkhUakZ3UzA1RlRreFNWV1JVVGxVd01FNVVTazlUUlU1aFZGWmFZVlJWWkZSV1ZURkpVekZPVDAxV1dYZFhWWE4zVkRCT1JrNXNSa3RXVldjd1VYYzlQU0lzQ2lBZ0lDQWdJQ0psYldGcGJDSTZJQ0lpQ2lBZ0lDQjlDaUFnZlFwOQp0eXBlOiBrdWJlcm5ldGVzLmlvL2RvY2tlcmNvbmZpZ2pzb24K
kind: Secret
metadata:
  name: mtr-pull-secret-def
  namespace: argocd
type: Opaque
